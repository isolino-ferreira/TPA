package br.ifes.tpa.ordenador;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import br.ifes.tpa.merger.BufferIn;
import br.ifes.tpa.merger.BufferOut;
import br.ifes.tpa.merger.Cliente;

public class Ordenador {
	
	public static ArrayList<String> dividirArquivoPorMemoria(String path, int memoria){
		
		int tamCliente = 423;//cada cliente ocupa 423 bytes em disco
		int cabecalhoArquivo = 266;//cada arquivo gravado em disco tem 266 de metadados
		
		ArrayList<String> novosArquivos = new ArrayList<>();
		
		File file = new File(path);
		
		if (file.exists()){
			
			int i = path.lastIndexOf("/")+1;
		
			String nome = path.substring(i);
		
			System.out.print("Dividindo arquivo " + nome + " em ");
			
			int qntPartes = 1;
			
			if(file.length() > memoria){
				
				qntPartes = (int) (file.length() / memoria);
			
				if(((file.length() - 266) % memoria) != 0)
					qntPartes++;
				
			}
			
			System.out.println(qntPartes + " partes:");
			//System.out.println("tam arq: "+file.length());
			//System.out.println("qnt par: "+qntPartes);
			
			BufferIn bufferIn = new BufferIn(path,10);
			
			List<Cliente> clientes = new ArrayList<>();
			
			Cliente cliente = null;
			
			for(int p=0;p<qntPartes;p++){
				
				int tamParte = 0;
				
				while(
					((tamParte + tamCliente + cabecalhoArquivo) < memoria)//comportamento não compreendido
					&& 
					((cliente = (Cliente)bufferIn.getProximo()) != null)
					){
					//criar um arraylist que representará uma parte do arquivo que será ordenada
					//será gravada em disco via BufferOut
					
					clientes.add(cliente);
					
					tamParte += tamCliente;
					
				}
				
				//ordenar arraylist de clientes
				
				Collections.sort(clientes);
				
				String novoArquivo = nome + "_part_" + p;
				
				novosArquivos.add(novoArquivo);
				
				System.out.println("  " + novoArquivo);
				
				BufferOut bufferOut = new BufferOut( novoArquivo );
				
				for(Cliente c : clientes){
					
					bufferOut.setProximo(c);
					
				}
				
				bufferOut.fecharBufferOut(); System.out.println("ksdfanfk");
				
				clientes.clear();
			}
		}
		
		System.out.println();
		
		return novosArquivos;

	}

}
